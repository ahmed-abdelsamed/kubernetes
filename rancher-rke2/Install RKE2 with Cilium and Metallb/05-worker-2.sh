#It's time to join our first agent(worker) node to the cluster. All Kubernetes workloads are handled by our worker nodes.
mkdir -p /etc/rancher/rke2/
```
server: https://10.10.10.171:9345
token: K108d84d0529445d3204600e2357f0a006ee51f45b45f7a527eab210bf82b5f561f::server:51d12be275ec1a75ec9554376162940c
node-name: rke2-worker2
kubelet-arg:
  - '--node-status-update-frequency=4s'
  - '--max-pods=100'

```
<<COMMINT
Let's explain the above options:

server: As we mentioned in previous sections, This is a fixed registration address. It's the layer 4 load balancer and will distribute requests on our server nodes(the nodes that are running the rke2-server service).
token: The registration address. It's been generated by the first server node we bootstraped the cluster. The token value can be obtained from /var/lib/rancher/rke2/server/node-token.
node-name: A unique name for this worker node. This name is used by Rancher to identify node and must be unique.
kubelet-arg: Kubelet specific arguments. As you've seen, all server nodes have the same kubelet arguments as this agent node. The kubelet arguments are the same across the cluster. Here we've specified two arguments for kubelet, one for the frequency of status updates reported to the kube-api-server and the other one for the maximum allowed pods on a single node.
COMMINT

curl -sfL https://get.rke2.io > install_rke2.sh

chmod ug+x install_rke2.sh
INSTALL_RKE2_VERSION="v1.29.4+rke2r1" INSTALL_RKE2_TYPE="agent" ./install_rke2.sh

systemctl enable --now rke2-agent.service
systemctl status rke2-agent

