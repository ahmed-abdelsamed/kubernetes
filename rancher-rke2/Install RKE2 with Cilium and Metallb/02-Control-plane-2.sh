#The procedure to join other server nodes is mostly the same as bootstrapping the first server node. The only difference is when we set which server node our new node should join to. So you should be able to follow the tutorial for all of the Server nodes 2, 3, etc.

#Let's go through the steps

# Set up Rancher configs
mkdir -p /etc/rancher/rke2/
vim /etc/rancher/rke2/config.yaml

#The configuration options are the same as the first server node. The only difference is the first 2 lines: server and token:

server: This is a fixed registration address. It's a layer 4 load balancer and will distribute requests on our server nodes(the nodes that are running rke2-server service).
token: The registration address. It's been generated by the first server node we bootstraped the cluster. The token value can be obtained from /var/lib/rancher/rke2/server/node-token.
         Add these lines to the config.yaml:

```
server: https://10.10.10.171:9345
token: K108d84d0529445d3204600e2357f0a006ee51f45b45f7a527eab210bf82b5f561f::server:51d12be275ec1a75ec9554376162940c
write-kubeconfig-mode: "0644"
advertise-address: 10.10.10.171
tls-san:
  - 10.10.10.171
  - bastion-server.linkdev.local
cni: none
cluster-cidr: 10.100.0.0/16
service-cidr: 10.110.0.0/16
cluster-dns: 10.110.0.10
cluster-domain: arman-projects.com
etcd-arg: "--quota-backend-bytes 2048000000"
etcd-snapshot-schedule-cron: "0 3 * * *"
etcd-snapshot-retention: 10
disable:
  - rke2-ingress-nginx
disable-kube-proxy: true
kube-apiserver-arg:
  - '--default-not-ready-toleration-seconds=30'
  - '--default-unreachable-toleration-seconds=30'
kube-controller-manager-arg:
  - '--node-monitor-period=4s'
kubelet-arg:
  - '--node-status-update-frequency=4s'
  - '--max-pods=100'
egress-selector-mode: disabled
protect-kernel-defaults: true
```
#NOTE: We've omitted the next lines as they're the same as the first node.

#Install rke2
curl -sfL https://get.rke2.io > install_rke2.sh
chmod ug+x install_rke2.sh
INSTALL_RKE2_VERSION="v1.29.4+rke2r1" INSTALL_RKE2_TYPE="server" ./install_rke2.sh

systemctl disable rke2-agent && systemctl mask rke2-agent

systemctl enable --now rke2-server.service

systemctl status rke2-server

journalctl -u rke2-server -f